{"version":3,"sources":["pages/formik-basicform.jsx","App.js","serviceWorker.js","index.js"],"names":["validationSchema","Yup","shape","name","min","max","required","email","phone","matches","blog","url","BasicForm","Container","initialValues","onSubmit","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Form","className","console","log","Group","controlId","Label","Control","type","placeholder","onChange","onBlur","value","isInvalid","isValid","component","Text","as","selected","disabled","Switch","label","Button","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbdfcdcd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\n// RegEx for phone number validation\nconst phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\n// Schema for yup\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Names must have at least 2 characters\")\n    .max(100, \"Names can't be longer than 100 characters\")\n    .required(\"Name is required\"),\n  email: Yup.string()\n    .email(\"Must be a valid email address\")\n    .max(100, \"Email must be less than 100 characters\")\n    .required(\"Email is required\"),\n  phone: Yup.string()\n    .matches(phoneRegExp, \"Phone number is not valid\")\n    .required(\"Phone number required\"),\n  blog: Yup.string()\n    .url(\"Must enter URL in http://www.example.com format\")\n    .required(\"URL required\"),\n});\n\nconst BasicForm = () => {\n  return (\n    <Container>\n      <h2>Form Validation with Formik, Yup and React-Bootstrap</h2>\n      <Formik\n        initialValues={{ name: \"\", email: \"\", phone: \"\", blog: \"\" }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          // When button submits form and form is in the process of submitting, submit button is disabled\n          setSubmitting(true);\n\n          // Simulate submitting to database, shows us values submitted, resets form\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            resetForm();\n            setSubmitting(false);\n          }, 500);\n        }}\n      >\n        {/* Callback function containing Formik state and helpers that handle common form actions */}\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <Form onSubmit={handleSubmit} className=\"mx-auto\">\n            {console.log(values)}\n            <Form.Group controlId=\"formName\">\n              <Form.Label>Name:</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Full Name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n                isInvalid={touched.name && errors.name}\n                isValid={touched.name && !errors.name}\n              />\n              <ErrorMessage\n                name=\"name\"\n                component={Form.Text}\n                className=\"text-danger\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formEmail\">\n              <Form.Label>Email:</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                isInvalid={touched.email && errors.email}\n                isValid={touched.email && !errors.email}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component={Form.Text}\n                className=\"text-danger\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formPhone\">\n              <Form.Label>Phone:</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"phone\"\n                placeholder=\"Phone\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.phone}\n                isInvalid={touched.phone && errors.phone}\n                isValid={touched.phone && !errors.phone}\n              />\n              <ErrorMessage\n                name=\"phone\"\n                component={Form.Text}\n                className=\"text-danger\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formBlog\">\n              <Form.Label>Blog:</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"blog\"\n                placeholder=\"Blog URL\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.blog}\n                isInvalid={touched.blog && errors.blog}\n                isValid={touched.blog && !errors.blog}\n              />\n              <ErrorMessage\n                name=\"blog\"\n                component={Form.Text}\n                className=\"text-danger\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formSelect\">\n              <Form.Label>Example select:</Form.Label>\n              <Form.Control as=\"select\">\n                <option selected disabled>\n                  please select...\n                </option>\n                <option>Apples</option>\n                <option>Monkeys</option>\n                <option>Watermelons</option>\n              </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"formSwitch\">\n              <Form.Label>Example switch:</Form.Label>\n              <Form.Switch label=\"Check this switch\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default BasicForm;\n","import React from \"react\";\n// import Basic from \"./pages/formik-basic\";\nimport BasicForm from \"./pages/formik-basicform\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return <BasicForm />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}