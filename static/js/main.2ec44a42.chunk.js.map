{"version":3,"sources":["pages/mulitple-dropdown.jsx","pages/formik-validation.jsx","layout/index.jsx","layout/default.jsx","App.js","serviceWorker.js","index.js"],"names":["MultipleDropdown","options","initialValue","useState","value","setValue","show","setShow","Row","Col","Dropdown","as","ButtonGroup","onToggle","isOpen","event","source","persist","onSelect","eventKey","includes","filter","e","Toggle","variant","length","join","Menu","map","option","index","Item","key","Form","Check","custom","label","type","readOnly","checked","Alert","JSON","stringify","validationSchema","Yup","shape","name","min","max","required","email","phone","matches","blog","url","color","switch","oneOf","FormikValidation","initialValues","onSubmit","values","setSubmitting","resetForm","setTimeout","alert","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","className","Group","controlId","Label","Control","placeholder","onChange","onBlur","isInvalid","isValid","component","Text","Switch","Button","disabled","style","marginTop","Layout","Default","headline","description","content","Container","Navigation","location","useLocation","Nav","margin","Link","to","active","pathname","PageHome","PageMultipleDropdown","PageFormikValidation","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ec44a42.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, ButtonGroup, Dropdown, Alert, Row, Col } from \"react-bootstrap\";\n\nconst MultipleDropdown = ({ options, initialValue = [] }) => {\n  const [value, setValue] = useState([\"Red\", \"Orange\"]);\n  const [show, setShow] = useState(false);\n\n  const handleToggle = (isOpen, event, { source }) => {\n    if (isOpen || source !== \"select\") {\n      setShow(isOpen);\n    }\n    if (event) event.persist();\n  };\n\n  const handleSelect = (eventKey) => {\n    value.includes(options[eventKey])\n      ? setValue(value.filter((e) => e !== options[eventKey]))\n      : setValue([...value, options[eventKey]]);\n  };\n\n  const renderButtonTitle = () => {\n    if (value.length < 1) return \"Bitte auswählen...\";\n    if (value.length > 4) return \"Mehr als 4 ausgewählt\";\n    return value.join(\", \");\n  };\n\n  return (\n    <Row>\n      <Col>\n        <Dropdown\n          as={ButtonGroup}\n          show={show}\n          onToggle={handleToggle}\n          onSelect={handleSelect}\n          value={value}\n        >\n          <Dropdown.Toggle variant=\"outline-dark\">\n            {renderButtonTitle()}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n            {options.map((option, index) => (\n              <Dropdown.Item eventKey={index} key={index}>\n                <Form.Check\n                  custom\n                  label={option}\n                  type=\"checkbox\"\n                  readOnly\n                  checked={value.includes(option)}\n                />\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      </Col>\n      <Col>\n        <Alert variant=\"primary\">\n          <pre>\n            <b>value: </b>\n            {JSON.stringify(value, null, 2)}\n          </pre>\n        </Alert>\n      </Col>\n    </Row>\n  );\n};\n\nexport default MultipleDropdown;\n","import React from \"react\";\nimport { Form, Button, Alert, Row, Col } from \"react-bootstrap\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport { Persist } from \"formik-persist\";\nimport * as Yup from \"yup\";\n\n// RegEx for phone number validation\nconst phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\n// Schema for yup\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Names must have at least 2 characters\")\n    .max(100, \"Names can't be longer than 100 characters\")\n    .required(\"Name is required\"),\n  email: Yup.string()\n    .email(\"Must be a valid email address\")\n    .max(100, \"Email must be less than 100 characters\")\n    .required(\"Email is required\"),\n  phone: Yup.string()\n    .matches(phoneRegExp, \"Phone number is not valid\")\n    .required(\"Phone number required\"),\n  blog: Yup.string()\n    .url(\"Must enter URL in http://www.example.com format\")\n    .required(\"URL required\"),\n  color: Yup.string().required(\"Color is required!\"),\n  switch: Yup.boolean().oneOf(\n    [true],\n    \"The terms and conditions must be accepted.\"\n  ),\n});\n\nconst FormikValidation = () => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        blog: \"\",\n        color: \"\",\n        switch: false,\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        // When button submits form and form is in the process of submitting, submit button is disabled\n        setSubmitting(true);\n\n        // Simulate submitting to database, shows us values submitted, resets form\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          resetForm();\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {/* Callback function containing Formik state and helpers that handle common form actions */}\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <Form onSubmit={handleSubmit} className=\"mx-auto\">\n          <Row>\n            <Col>\n              <Form.Group controlId=\"formName\">\n                <Form.Label>Name:</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Full Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  isInvalid={touched.name && errors.name}\n                  isValid={touched.name && !errors.name}\n                />\n                <ErrorMessage\n                  name=\"name\"\n                  component={Form.Text}\n                  className=\"text-danger\"\n                />\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"formEmail\">\n                <Form.Label>Email:</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  isInvalid={touched.email && errors.email}\n                  isValid={touched.email && !errors.email}\n                />\n                <ErrorMessage\n                  name=\"email\"\n                  component={Form.Text}\n                  className=\"text-danger\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId=\"formPhone\">\n                <Form.Label>Phone:</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"phone\"\n                  placeholder=\"Phone\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.phone}\n                  isInvalid={touched.phone && errors.phone}\n                  isValid={touched.phone && !errors.phone}\n                />\n                <ErrorMessage\n                  name=\"phone\"\n                  component={Form.Text}\n                  className=\"text-danger\"\n                />\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"formBlog\">\n                <Form.Label>Blog:</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"blog\"\n                  placeholder=\"Blog URL\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.blog}\n                  isInvalid={touched.blog && errors.blog}\n                  isValid={touched.blog && !errors.blog}\n                />\n                <ErrorMessage\n                  name=\"blog\"\n                  component={Form.Text}\n                  className=\"text-danger\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId=\"formColor\">\n                <Form.Label>Color:</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  name=\"color\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.color}\n                  isInvalid={touched.color && errors.color}\n                  isValid={touched.color && !errors.color}\n                >\n                  <option value=\"\" label=\"Select a color\" />\n                  <option value=\"red\" label=\"red\" />\n                  <option value=\"blue\" label=\"blue\" />\n                  <option value=\"green\" label=\"green\" />\n                </Form.Control>\n                <ErrorMessage\n                  name=\"color\"\n                  component={Form.Text}\n                  className=\"text-danger\"\n                />\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"formSwitch\">\n                <Form.Label>Switch:</Form.Label>\n                <Form.Switch\n                  name=\"switch\"\n                  label=\"I Agree\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.switch}\n                  isInvalid={touched.switch && errors.switch}\n                  isValid={touched.switch && !errors.switch}\n                />\n                <ErrorMessage\n                  name=\"switch\"\n                  component={Form.Text}\n                  className=\"text-danger\"\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Alert variant=\"primary\" style={{ marginTop: 40 }}>\n                <pre>\n                  <b>values: </b>\n                  {JSON.stringify(values, null, 2)}\n                </pre>\n              </Alert>\n            </Col>\n          </Row>\n          <Persist name=\"signup-form\" />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default FormikValidation;\n","import Default from \"./default\";\n\nexport const Layout = {\n  Default,\n};\n\nexport default Layout;\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst Default = ({ headline, description, content }) => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h2>{headline}</h2>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <p>{description}</p>\n        </Col>\n      </Row>\n      {content}\n    </Container>\n  );\n};\n\nexport default Default;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useLocation,\n} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Nav } from \"react-bootstrap\";\n\nimport MultipleDropdown from \"./pages/mulitple-dropdown\";\nimport FormikValidation from \"./pages/formik-validation\";\nimport Layout from \"./layout/index\";\n\nconst Navigation = () => {\n  const location = useLocation();\n  return (\n    <Nav variant=\"tabs\" style={{ margin: \"40px 0\" }}>\n      <Nav.Item>\n        <Nav.Link as={Link} to=\"/\" active={location.pathname === \"/\"}>\n          Home\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link\n          as={Link}\n          to=\"/formik-validation\"\n          active={location.pathname === \"/formik-validation\"}\n        >\n          Formik Validation\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link\n          as={Link}\n          to=\"/multi-select\"\n          active={location.pathname === \"/multi-select\"}\n        >\n          Multi Select\n        </Nav.Link>\n      </Nav.Item>\n    </Nav>\n  );\n};\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navigation />\n        <Switch>\n          <Route path=\"/formik-validation\">\n            <PageFormikValidation />\n          </Route>\n          <Route path=\"/multi-select\">\n            <PageMultipleDropdown />\n          </Route>\n          <Route path=\"/\">\n            <PageHome />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction PageHome() {\n  return (\n    <Layout.Default headline=\"Test2\" description=\"Lorem\" content={\"...\"} />\n  );\n}\n\nfunction PageMultipleDropdown() {\n  return (\n    <Layout.Default\n      headline=\"Minimal React Bootstrap Multiselect\"\n      description=\"A dropdown component that offers multiple selection of values.\"\n      content={\n        <MultipleDropdown\n          options={[\"Red\", \"Blue\", \"Orange\", \"Pink\", \"Gold\", \"Banana\"]}\n          initialValue={[\"Red\", \"Blue\"]}\n        />\n      }\n    />\n  );\n}\n\nfunction PageFormikValidation() {\n  return (\n    <Layout.Default\n      headline=\"Simple React Bootstrap Form Validation with Formik\"\n      description=\"Uses Yup for form validation. Uses formik-persist to store form input values in local storage.\"\n      content={<FormikValidation />}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}