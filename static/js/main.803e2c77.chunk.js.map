{"version":3,"sources":["pages/mulitple-dropdown.jsx","App.js","serviceWorker.js","index.js"],"names":["MultipleDropdown","options","initialValue","useState","value","setValue","show","setShow","Container","style","marginTop","Dropdown","as","ButtonGroup","onToggle","isOpen","event","source","persist","onSelect","eventKey","includes","filter","e","Toggle","variant","length","join","Menu","map","option","index","Item","key","Form","Check","custom","label","type","readOnly","checked","Alert","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAsEeA,EAnEU,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAAiC,KAAxBC,aACTC,mBAAS,CAAC,MAAO,YADgB,mBACpDC,EADoD,KAC7CC,EAD6C,OAEnCF,oBAAS,GAF0B,mBAEpDG,EAFoD,KAE9CC,EAF8C,KAuB3D,OACE,kBAACC,EAAA,EAAD,KACE,wBAAIC,MAAO,CAAEC,UAAW,KAAxB,sCACA,kBAACC,EAAA,EAAD,CACEC,GAAIC,IACJP,KAAMA,EACNQ,SAzBe,SAACC,EAAQC,EAAT,GAAgC,IAAdC,EAAa,EAAbA,QACjCF,GAAqB,WAAXE,IACZV,EAAQQ,GAENC,GAAOA,EAAME,WAsBbC,SAnBe,SAACC,GACpBhB,EAAMiB,SAASpB,EAAQmB,IACnBf,EAASD,EAAMkB,QAAO,SAACC,GAAD,OAAOA,IAAMtB,EAAQmB,OAC3Cf,EAAS,GAAD,mBAAKD,GAAL,CAAYH,EAAQmB,OAiB5BhB,MAAOA,GAEP,kBAACO,EAAA,EAASa,OAAV,CAAiBC,QAAQ,gBAfzBrB,EAAMsB,OAAS,EAAU,wBACzBtB,EAAMsB,OAAS,EAAU,2BACtBtB,EAAMuB,KAAK,OAiBd,kBAAChB,EAAA,EAASiB,KAAV,KACG3B,EAAQ4B,KAAI,SAACC,EAAQC,GAAT,OACX,kBAACpB,EAAA,EAASqB,KAAV,CAAeZ,SAAUW,EAAOE,IAAKF,GACnC,kBAACG,EAAA,EAAKC,MAAN,CACEC,QAAM,EACNC,MAAOP,EACPQ,KAAK,WACLC,UAAQ,EACRC,QAASpC,EAAMiB,SAASS,WAMlC,kBAACW,EAAA,EAAD,CAAOhC,MAAO,CAAEC,UAAW,KAAOe,QAAQ,WACxC,6BACE,2BACE,wCACCiB,KAAKC,UAAU1C,IAElB,2BACE,sCACCyC,KAAKC,UAAUvC,QChDbwC,MATf,WACE,OACE,kBAAC,EAAD,CACE3C,QAAS,CAAC,MAAO,OAAQ,SAAU,OAAQ,OAAQ,UACnDC,aAAc,CAAC,MAAO,WCGR2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.803e2c77.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, ButtonGroup, Dropdown, Container, Alert } from \"react-bootstrap\";\n\nconst MultipleDropdown = ({ options, initialValue = [] }) => {\n  const [value, setValue] = useState([\"Red\", \"Orange\"]);\n  const [show, setShow] = useState(false);\n\n  const handleToggle = (isOpen, event, { source }) => {\n    if (isOpen || source !== \"select\") {\n      setShow(isOpen);\n    }\n    if (event) event.persist();\n  };\n\n  const handleSelect = (eventKey) => {\n    value.includes(options[eventKey])\n      ? setValue(value.filter((e) => e !== options[eventKey]))\n      : setValue([...value, options[eventKey]]);\n  };\n\n  const renderButtonTitle = () => {\n    if (value.length < 1) return \"Bitte auswählen...\";\n    if (value.length > 4) return \"Mehr als 4 ausgewählt\";\n    return value.join(\", \");\n  };\n\n  return (\n    <Container>\n      <h5 style={{ marginTop: 40 }}>Mulitple Value Dropdown Component:</h5>\n      <Dropdown\n        as={ButtonGroup}\n        show={show}\n        onToggle={handleToggle}\n        onSelect={handleSelect}\n        value={value}\n      >\n        <Dropdown.Toggle variant=\"outline-dark\">\n          {renderButtonTitle()}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          {options.map((option, index) => (\n            <Dropdown.Item eventKey={index} key={index}>\n              <Form.Check\n                custom\n                label={option}\n                type=\"checkbox\"\n                readOnly\n                checked={value.includes(option)}\n              />\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n      <Alert style={{ marginTop: 100 }} variant=\"primary\">\n        <pre>\n          <p>\n            <b>options: </b>\n            {JSON.stringify(options)}\n          </p>\n          <p>\n            <b>value: </b>\n            {JSON.stringify(value)}\n          </p>\n        </pre>\n      </Alert>\n    </Container>\n  );\n};\n\nexport default MultipleDropdown;\n","import React from \"react\";\n// import Basic from \"./pages/formik-basic\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport MultipleDropdown from \"./pages/mulitple-dropdown\";\n\nfunction App() {\n  return (\n    <MultipleDropdown\n      options={[\"Red\", \"Blue\", \"Orange\", \"Pink\", \"Gold\", \"Banana\"]}\n      initialValue={[\"Red\", \"Blue\"]}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}